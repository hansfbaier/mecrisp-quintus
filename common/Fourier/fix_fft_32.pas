(* fix_fft.c - Fixed-point in-place Fast Fourier Transform  *)
(*
  All data are fixed-point longint integers, in which -32768
  to +32768 represent -1.0 to +1.0 respectively. Integer
  arithmetic is used for speed, instead of the more natural
  floating-point.

  For the forward FFT (time -> freq), fixed scaling is
  performed to prevent arithmetic overflow, and to map a 0dB
  sine/cosine wave (i.e. amplitude = 32767) to two -6dB freq
  coefficients. The return value is always 0.

  For the inverse FFT (freq -> time), fixed scaling cannot be
  done, as two 0dB coefficients would sum to a peak amplitude
  of 64K, overflowing the 32k range of the fixed-point integers.
  Thus, the fix_fft() routine performs variable scaling, and
  returns a value which is the number of bits LEFT by which
  the output must be shifted to get the actual amplitude
  (i.e. if fix_fft() returns 3, each value of fr[] and fi[]
  must be multiplied by 8 (2**3) for proper scaling.
  Clearly, this cannot be done within fixed-point longint
  integers. In practice, if the result is to be used as a
  filter, the scale_shift can usually be ignored, as the
  result will be approximately correctly normalized as is.

  Written by:  Tom Roberts  11/8/89
  Made portable:  Malcolm Slaney 12/15/94 malcolm@interval.com
  Enhanced:  Dimitrios P. Bouras  14 Jun 2006 dbouras@ieee.org
  Translated to Pascal and enhanced for 32 bits:
  Matthias Koch, 22 Jan 2020 m.cook@gmx.net
*)

{$R+}

const N_WAVE = 1024;    (* full length of Sinewave[] *)
 LOG2_N_WAVE = 10;      (* log2(N_WAVE) *)

(*
  Henceforth "longint" implies 32-bit word. If this is not
  the case in your architecture, please replace "longint"
  with a type definition which *is* a 32-bit word.
*)

(*
  Since we only use 3/4 of N_WAVE, we define only
  this many samples, in order to conserve data space.
*)

const Sinewave : array[0..N_WAVE - (N_WAVE div 4) - 1] of longint =
(
           0,    13176711,    26352927,    39528151,    52701886,    65873638,    79042909,    92209204,
   105372028,   118530884,   131685278,   144834714,   157978697,   171116732,   184248325,   197372981,
   210490205,   223599506,   236700387,   249792357,   262874923,   275947591,   289009870,   302061268,
   315101294,   328129456,   341145265,   354148229,   367137860,   380113668,   393075166,   406021864,
   418953276,   431868914,   444768293,   457650927,   470516330,   483364018,   496193509,   509004317,
   521795962,   534567962,   547319836,   560051103,   572761285,   585449902,   598116478,   610760535,
   623381597,   635979189,   648552837,   661102067,   673626407,   686125386,   698598532,   711045377,
   723465451,   735858286,   748223418,   760560379,   772868705,   785147933,   797397601,   809617248,
   821806412,   833964637,   846091463,   858186434,   870249094,   882278991,   894275670,   906238680,
   918167571,   930061893,   941921199,   953745042,   965532977,   977284561,   988999350,  1000676904,
  1012316783,  1023918549,  1035481765,  1047005996,  1058490807,  1069935767,  1081340444,  1092704410,
  1104027236,  1115308495,  1126547764,  1137744620,  1148898639,  1160009404,  1171076494,  1182099495,
  1193077990,  1204011566,  1214899812,  1225742317,  1236538674,  1247288476,  1257991319,  1268646799,
  1279254514,  1289814067,  1300325059,  1310787094,  1321199779,  1331562722,  1341875532,  1352137821,
  1362349203,  1372509293,  1382617709,  1392674071,  1402677998,  1412629116,  1422527049,  1432371425,
  1442161873,  1451898024,  1461579512,  1471205973,  1480777043,  1490292363,  1499751575,  1509154321,
  1518500249,  1527789006,  1537020242,  1546193611,  1555308767,  1564365365,  1573363067,  1582301532,
  1591180424,  1599999410,  1608758156,  1617456334,  1626093615,  1634669674,  1643184190,  1651636840,
  1660027307,  1668355275,  1676620430,  1684822462,  1692961061,  1701035921,  1709046738,  1716993210,
  1724875039,  1732691926,  1740443579,  1748129706,  1755750016,  1763304223,  1770792043,  1778213193,
  1785567395,  1792854371,  1800073847,  1807225552,  1814309215,  1821324571,  1828271354,  1835149305,
  1841958163,  1848697672,  1855367579,  1861967633,  1868497584,  1874957188,  1881346200,  1887664381,
  1893911493,  1900087299,  1906191569,  1912224071,  1918184579,  1924072869,  1929888719,  1935631909,
  1941302224,  1946899449,  1952423376,  1957873794,  1963250500,  1968553290,  1973781966,  1978936329,
  1984016187,  1989021348,  1993951623,  1998806828,  2003586778,  2008291294,  2012920199,  2017473319,
  2021950482,  2026351520,  2030676267,  2034924560,  2039096240,  2043191148,  2047209132,  2051150039,
  2055013722,  2058800034,  2062508834,  2066139982,  2069693340,  2073168776,  2076566158,  2079885359,
  2083126253,  2086288718,  2089372636,  2092377891,  2095304368,  2098151959,  2100920555,  2103610052,
  2106220350,  2108751350,  2111202957,  2113575078,  2115867624,  2118080509,  2120213650,  2122266965,
  2124240379,  2126133816,  2127947205,  2129680478,  2131333570,  2132906418,  2134398964,  2135811151,
  2137142926,  2138394238,  2139565041,  2140655291,  2141664947,  2142593969,  2143442325,  2144209981,
  2144896908,  2145503082,  2146028478,  2146473078,  2146836865,  2147119824,  2147321945,  2147443221,

  2147483647,  2147443221,  2147321945,  2147119824,  2146836865,  2146473078,  2146028478,  2145503082,
  2144896908,  2144209981,  2143442325,  2142593969,  2141664947,  2140655291,  2139565041,  2138394238,
  2137142926,  2135811151,  2134398964,  2132906418,  2131333570,  2129680478,  2127947205,  2126133816,
  2124240379,  2122266965,  2120213650,  2118080509,  2115867624,  2113575078,  2111202957,  2108751350,
  2106220350,  2103610052,  2100920555,  2098151959,  2095304368,  2092377891,  2089372636,  2086288718,
  2083126253,  2079885359,  2076566158,  2073168776,  2069693340,  2066139982,  2062508834,  2058800034,
  2055013722,  2051150039,  2047209132,  2043191148,  2039096240,  2034924560,  2030676267,  2026351520,
  2021950482,  2017473319,  2012920199,  2008291294,  2003586778,  1998806828,  1993951623,  1989021348,
  1984016187,  1978936329,  1973781966,  1968553290,  1963250500,  1957873794,  1952423376,  1946899449,
  1941302224,  1935631909,  1929888719,  1924072869,  1918184579,  1912224071,  1906191569,  1900087299,
  1893911493,  1887664381,  1881346200,  1874957188,  1868497584,  1861967633,  1855367579,  1848697672,
  1841958163,  1835149305,  1828271354,  1821324571,  1814309215,  1807225552,  1800073847,  1792854371,
  1785567395,  1778213193,  1770792043,  1763304223,  1755750016,  1748129706,  1740443579,  1732691926,
  1724875039,  1716993210,  1709046738,  1701035921,  1692961061,  1684822462,  1676620430,  1668355275,
  1660027307,  1651636840,  1643184190,  1634669674,  1626093615,  1617456334,  1608758156,  1599999410,
  1591180424,  1582301532,  1573363067,  1564365365,  1555308767,  1546193611,  1537020242,  1527789006,
  1518500249,  1509154321,  1499751575,  1490292363,  1480777043,  1471205973,  1461579512,  1451898024,
  1442161873,  1432371425,  1422527049,  1412629116,  1402677998,  1392674071,  1382617709,  1372509293,
  1362349203,  1352137821,  1341875532,  1331562722,  1321199779,  1310787094,  1300325059,  1289814067,
  1279254514,  1268646799,  1257991319,  1247288476,  1236538674,  1225742317,  1214899812,  1204011566,
  1193077990,  1182099495,  1171076494,  1160009404,  1148898639,  1137744620,  1126547764,  1115308495,
  1104027236,  1092704410,  1081340444,  1069935767,  1058490807,  1047005996,  1035481765,  1023918549,
  1012316783,  1000676904,   988999350,   977284561,   965532977,   953745042,   941921199,   930061893,
   918167571,   906238680,   894275670,   882278991,   870249094,   858186434,   846091463,   833964637,
   821806412,   809617248,   797397601,   785147933,   772868705,   760560379,   748223418,   735858286,
   723465451,   711045377,   698598532,   686125386,   673626407,   661102067,   648552837,   635979189,
   623381597,   610760535,   598116478,   585449902,   572761285,   560051103,   547319836,   534567962,
   521795962,   509004317,   496193509,   483364018,   470516330,   457650927,   444768293,   431868914,
   418953276,   406021864,   393075166,   380113668,   367137860,   354148229,   341145265,   328129456,
   315101294,   302061268,   289009870,   275947591,   262874923,   249792357,   236700387,   223599506,
   210490205,   197372981,   184248325,   171116732,   157978697,   144834714,   131685278,   118530884,
   105372028,    92209204,    79042909,    65873638,    52701886,    39528151,    26352927,    13176711,

           0,   -13176711,   -26352927,   -39528151,   -52701886,   -65873638,   -79042909,   -92209204,
  -105372028,  -118530884,  -131685278,  -144834714,  -157978697,  -171116732,  -184248325,  -197372981,
  -210490205,  -223599506,  -236700387,  -249792357,  -262874923,  -275947591,  -289009870,  -302061268,
  -315101294,  -328129456,  -341145265,  -354148229,  -367137860,  -380113668,  -393075166,  -406021864,
  -418953276,  -431868914,  -444768293,  -457650927,  -470516330,  -483364018,  -496193509,  -509004317,
  -521795962,  -534567962,  -547319836,  -560051103,  -572761285,  -585449902,  -598116478,  -610760535,
  -623381597,  -635979189,  -648552837,  -661102067,  -673626407,  -686125386,  -698598532,  -711045377,
  -723465451,  -735858286,  -748223418,  -760560379,  -772868705,  -785147933,  -797397601,  -809617248,
  -821806412,  -833964637,  -846091463,  -858186434,  -870249094,  -882278991,  -894275670,  -906238680,
  -918167571,  -930061893,  -941921199,  -953745042,  -965532977,  -977284561,  -988999350, -1000676904,
 -1012316783, -1023918549, -1035481765, -1047005996, -1058490807, -1069935767, -1081340444, -1092704410,
 -1104027236, -1115308495, -1126547764, -1137744620, -1148898639, -1160009404, -1171076494, -1182099495,
 -1193077990, -1204011566, -1214899812, -1225742317, -1236538674, -1247288476, -1257991319, -1268646799,
 -1279254514, -1289814067, -1300325059, -1310787094, -1321199779, -1331562722, -1341875532, -1352137821,
 -1362349203, -1372509293, -1382617709, -1392674071, -1402677998, -1412629116, -1422527049, -1432371425,
 -1442161873, -1451898024, -1461579512, -1471205973, -1480777043, -1490292363, -1499751575, -1509154321,
 -1518500249, -1527789006, -1537020242, -1546193611, -1555308767, -1564365365, -1573363067, -1582301532,
 -1591180424, -1599999410, -1608758156, -1617456334, -1626093615, -1634669674, -1643184190, -1651636840,
 -1660027307, -1668355275, -1676620430, -1684822462, -1692961061, -1701035921, -1709046738, -1716993210,
 -1724875039, -1732691926, -1740443579, -1748129706, -1755750016, -1763304223, -1770792043, -1778213193,
 -1785567395, -1792854371, -1800073847, -1807225552, -1814309215, -1821324571, -1828271354, -1835149305,
 -1841958163, -1848697672, -1855367579, -1861967633, -1868497584, -1874957188, -1881346200, -1887664381,
 -1893911493, -1900087299, -1906191569, -1912224071, -1918184579, -1924072869, -1929888719, -1935631909,
 -1941302224, -1946899449, -1952423376, -1957873794, -1963250500, -1968553290, -1973781966, -1978936329,
 -1984016187, -1989021348, -1993951623, -1998806828, -2003586778, -2008291294, -2012920199, -2017473319,
 -2021950482, -2026351520, -2030676267, -2034924560, -2039096240, -2043191148, -2047209132, -2051150039,
 -2055013722, -2058800034, -2062508834, -2066139982, -2069693340, -2073168776, -2076566158, -2079885359,
 -2083126253, -2086288718, -2089372636, -2092377891, -2095304368, -2098151959, -2100920555, -2103610052,
 -2106220350, -2108751350, -2111202957, -2113575078, -2115867624, -2118080509, -2120213650, -2122266965,
 -2124240379, -2126133816, -2127947205, -2129680478, -2131333570, -2132906418, -2134398964, -2135811151,
 -2137142926, -2138394238, -2139565041, -2140655291, -2141664947, -2142593969, -2143442325, -2144209981,
 -2144896908, -2145503082, -2146028478, -2146473078, -2146836865, -2147119824, -2147321945, -2147443221
);

(*
  FIX_MPY() - fixed-point multiplication & scaling.
  Substitute inline assembly for hardware-specific
  optimization suited to a particluar DSP processor.
  Scaling ensures that result remains 32-bit.
*)
function FIX_MPY(a, b : longint) : longint;
var c : int64;
begin
  c := a * b;
  c := c div $80000000;
  fix_mpy := c;
end;

(*
  fix_fft() - perform forward/inverse fast Fourier transform.
  fr[n],fi[n] are real and imaginary arrays, both INPUT AND
  RESULT (in-place FFT), with 0 <= n < 2**m; set inverse to
  0 for forward transform (FFT), or 1 for iFFT.
*)


var fr : array[0..511] of longint;
    fi : array[0..511] of longint;

function fix_fft(m : longint; inverse : boolean) : longint;

var mr, nn, i, j, l, k, istep, n, scale : longint;
    qr, qi, tr, ti, wr, wi : longint;
    shift : boolean;

begin
  n := 1 shl m;

  (* max FFT size = N_WAVE *)
  if n > N_WAVE then begin fix_fft := -1; exit; end;

  mr := 0;
  nn := n - 1;
  scale := 0;

  (* decimation in time - re-order data *)
  for m := 1 to nn do
  begin
    l := n;

    repeat
      l := l shr 1;
    until not(mr+l > nn);

    mr := (mr and (l-1)) + l;

    if not(mr <= m) then
    begin
      tr := fr[m]; fr[m] := fr[mr]; fr[mr] := tr;
      ti := fi[m]; fi[m] := fi[mr]; fi[mr] := ti;
    end;
  end;

  l := 1;
  k := LOG2_N_WAVE-1;

  while (l < n) do
  begin

    if inverse then
    begin

      (* variable scaling, depending upon data *)
      shift := false;
      for i := 0 to n-1 do
      begin
        j := abs(fr[i]); m := abs(fi[i]);
        if (j > $3FFFFFFF) or (m > $3FFFFFFF) then shift := true;
      end;
      if shift then inc(scale);

    end
    else
    begin
      (*
        fixed scaling, for proper normalization --
        there will be log2(n) passes, so this results
        in an overall factor of 1/n, distributed to
        maximize arithmetic accuracy.
      *)
      shift := true;
    end;

    (*
      it may not be obvious, but the shift will be
      performed on each data point exactly once,
      during this pass.
    *)
    istep := l shl 1;

    for m := 0 to l-1 do
    begin
      j := m shl k;

      (* 0 <= j < N_WAVE/2 *)
      wr :=  Sinewave[j+N_WAVE div 4];
      wi := -Sinewave[j];

      if inverse then wi := -wi;

      if shift then
      begin
        wr := wr div 2;
        wi := wi div 2;
      end;

      // for (i=m; i<n; i+=istep)
      i := m;
      while i < n do
      begin
        j := i + l;
        tr := FIX_MPY(wr,fr[j]) - FIX_MPY(wi,fi[j]);
        ti := FIX_MPY(wr,fi[j]) + FIX_MPY(wi,fr[j]);

        qr := fr[i];  qi := fi[i];

        if shift then
        begin
          qr := qr div 2;
          qi := qi div 2;
        end;

        fr[j] := qr - tr;  fi[j] := qi - ti;
        fr[i] := qr + tr;  fi[i] := qi + ti;

        i := i + istep;
      end;

    end;
    dec(k);
    l := istep;
  end;

  fix_fft := scale;
end;


// Reorder array from native order to math order and back

procedure fftswap(m : longint);
var k, i, r, n : longint;
begin
  n := 1 shl (m-1);
  for k := 0 to n - 1 do
  begin
    r := fr[k];  fr[k] := fr[k + n];  fr[k + n] := r;
    i := fi[k];  fi[k] := fi[k + n];  fi[k + n] := i;
  end;
end;

// A small test routine for FFT and iFFT

var x : longint;
    input_r, input_i, output_r, output_i : array[0..511] of longint;
    datafile : text;

begin
  for x := 0 to 511 do
  begin
    input_r[x] := sinewave[((x*16) and $1FF)] div 2;
    if (((x*16) shr 9) and 1) = 1 then input_r[x] := - input_r[x];
    input_r[x] := input_r[x] + 4096 shl 16 ;
    input_i[x] := 0;
  end;

  fr := input_r;
  fi := input_i;
  writeln('Scale FFT: ', fix_fft(9, false));

  fftswap(9);

  fr[256 + 5] := 2000;
  fr[256 - 5] := 2000;

  output_r := fr;
  output_i := fi;
  fftswap(9);

  writeln('Scale iFFT: ', fix_fft(9, true));

  assign(datafile, 'FFT.dat');
  rewrite(datafile);
  for x := 0 to 511 do writeln(datafile, input_r[x], chr(9), input_i[x], chr(9), output_r[x], chr(9), output_i[x], chr(9), fr[x], chr(9), fi[x]);
  close(datafile);
end.

// fpc fix_fft_32.pas && ./fix_fft_32
// plot "FFT.dat" u 0:1 w l,  "FFT.dat" u 0:2 w l,  "FFT.dat" u 0:3 w l,  "FFT.dat" u 0:4 w l,  "FFT.dat" u 0:5 w l,  "FFT.dat" u 0:6 w l
// plot "FFT.dat" u 0:1 w lp, "FFT.dat" u 0:2 w lp, "FFT.dat" u 0:3 w lp, "FFT.dat" u 0:4 w lp, "FFT.dat" u 0:5 w lp, "FFT.dat" u 0:6 w lp
// plot "FFT.dat" u 0:1 w l,  "FFT.dat" u 0:2 w l,  "FFT.dat" u 0:5 w l,  "FFT.dat" u 0:6 w l,  "FFT.dat" u 0:3 w lp, "FFT.dat" u 0:4 w lp

